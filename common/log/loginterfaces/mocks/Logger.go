// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

// Debug provides a mock function with given fields: ctx, msg, keysAndValues
func (_m *Logger) Debug(ctx context.Context, msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// DebugNoCtx provides a mock function with given fields: msg, keysAndValues
func (_m *Logger) DebugNoCtx(msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// Debugf provides a mock function with given fields: ctx, fs, args
func (_m *Logger) Debugf(ctx context.Context, fs string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, fs)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Debugv provides a mock function with given fields: ctx, skip, msg, keysAndValues
func (_m *Logger) Debugv(ctx context.Context, skip int, msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, skip, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: ctx, msg, keysAndValues
func (_m *Logger) Error(ctx context.Context, msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// ErrorNoCtx provides a mock function with given fields: msg, keysAndValues
func (_m *Logger) ErrorNoCtx(msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// Errorf provides a mock function with given fields: ctx, fs, args
func (_m *Logger) Errorf(ctx context.Context, fs string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, fs)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Errorv provides a mock function with given fields: ctx, skip, msg, keysAndValues
func (_m *Logger) Errorv(ctx context.Context, skip int, msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, skip, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// Info provides a mock function with given fields: ctx, msg, keysAndValues
func (_m *Logger) Info(ctx context.Context, msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// InfoNoCtx provides a mock function with given fields: msg, keysAndValues
func (_m *Logger) InfoNoCtx(msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// Infof provides a mock function with given fields: ctx, fs, args
func (_m *Logger) Infof(ctx context.Context, fs string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, fs)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Infov provides a mock function with given fields: ctx, skip, msg, keysAndValues
func (_m *Logger) Infov(ctx context.Context, skip int, msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, skip, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// Warn provides a mock function with given fields: ctx, msg, keysAndValues
func (_m *Logger) Warn(ctx context.Context, msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// WarnNoCtx provides a mock function with given fields: msg, keysAndValues
func (_m *Logger) WarnNoCtx(msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// Warnf provides a mock function with given fields: ctx, fs, args
func (_m *Logger) Warnf(ctx context.Context, fs string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, fs)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Warnv provides a mock function with given fields: ctx, skip, msg, keysAndValues
func (_m *Logger) Warnv(ctx context.Context, skip int, msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, skip, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}
